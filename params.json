{
  "name": "操作系统 磁盘 Spooling",
  "tagline": "操作系统作业",
  "body": "# 操作系统 I/O Spooling\r\n\r\n`操作系统` `I/O` `假脱机技术` `虚拟设备技术` `spooling`\r\n\r\n---\r\n\r\n## 用户控件的I/O软件\r\n> 虽然绝大部分I/O软件都是在操作系统内部的，然而一小部分的软件包括库函数和用户程序的连接，甚至可以是一个运行在操作系统之外的单独的程序\r\n\r\n### 1. 库函数\r\n- 实质是空壳，最终将会调用系统函数进行输入输出\r\n\r\n### 2. spooling（Simultaneous Peripheral Operation On-Line）\r\n- 并非所有用户级I/O软件包含库函数程序。另一种是spooling系统，Spooling是一种在多道程序系统中处理独占I/O设备的方式。\r\n- 考虑一种典型的spooled设备：一台打印机。一个进程如果打开了它，但是数小时什么都不做，那将没有任何其他进程可以打印任何东西\r\n- 然而，如果创建一个特别的后台驻留进程（deamon）和一个特殊的目录（spooling direcory），当打印一份文件的时候，首先一个进程generates整个需要打印的文件，并且将其放入spooling directory中。最终是由deamon进程——唯一的有权限使用打印机的特殊文件的进程——来打印目录中的文件。\r\n\r\n> spooling技术实际上是一种外围设备同时联机操作技术，又称为排队转储技术。它在输入和输出之间增加了“输入井”和“输出井”的排队转储环节，以消除用户的“联机”等待时间。在系统输入模块收到作业输入请求信号后，输入管理模块中的读过程负责将信息从输入装置中读入输入井缓冲区。当缓冲区满时，由写过程将信息从缓冲区写到外存的输入井中，读过程和写过程反复循环，直到一个作业输入完毕。当读过程读到一个硬件结束标志之后，系统再次驱动写过程把最后一批信息写入外存输入井并调用中断处理程序结束该次输入。然后，系统为该作业建立作业控制块，从而使输入井中的作业进入作业等待队列，等待作业调度程序选中后进入内存运行。\r\n系统在管理输入井过程中可以“不断”读入输入的作业，直到输入结束或输入井满而暂停。\r\n若系统的某台台行式打印机采用了虚拟设备技术，那么若有进程要求对它打印输出时，spooling系统并不是将这台打印机直接分配给进程，而是在共享设备（磁盘）上的输出，spooling存储区中为其分配一块存储空间。\r\n\r\n> 各进程的数据输出文件形成了一个输出队列，由输出POOLing系统控制这台打印机进程，依次将队列中的输出文件实际打印输出。在spooling系统中，实际上并没有为任何进程分配，而只是在输入井和输出井中，为进程分配一存储区和建立一章I/O请求表。这样，便把独占设备改造为共享设备。\r\n--via baike.baidu.com\r\n\r\n---\r\n---\r\n\r\n# 操作系统 磁盘\r\n\r\n`操作系统` `磁盘` `Disk`\r\n\r\n---\r\n\r\n## 磁盘硬件\r\n- Disk有多种类型，通常是磁盘（硬盘和软盘）还有光盘等\r\n- 磁盘通常由一个或多个金属盘片组成，这些盘片被固定在一根旋转轴上，由同一个马达来驱动，每个盘片都有上下两个盘面，在盘面上涂有磁性材料，每个盘面对应一个磁头，磁头被固定在磁头臂上，磁头臂被固定在传动装置上，传动装置移动时所有磁头都会跟着移动。\r\n- 将磁盘的一个盘片按同心圆分成不同的磁道，每个磁道上有以 512Bytes 为单位的若干扇区。将磁盘按照同心圆分成不同的柱面，每个柱面上有若干的盘面。\r\n- 如果要访问磁盘上的某个扇区，首先给出其物理地址（柱面号、盘面号、扇区号），磁盘驱动器\r\n- 需要指出的是，磁盘的读写是以扇区为单位的，即使只想读取一个字节，也要将整个扇区读入。\r\n\r\n## 磁盘的格式化\r\n硬盘的格式化分为三个步骤：低级格式化、分区和高级格式化。\r\n\r\n- 低级格式化：\r\n在磁盘上标出磁道和扇区\r\n- 分区：\r\n把磁盘分成不同的逻辑区，没一个逻辑分区都可以看成一个独立的硬盘\r\n- 高级格式化：\r\n操作完成后，相应的逻辑分区上将会生成一个引导块、空闲存储管理的数据结构、根目录和一个空白的文件系统（FAT16、FAT32、NTFS、EXT）\r\n- 扇区：\r\n- - 相位编码：\r\n以某个特定的位组合模式开始，用来向硬件表明这是一个新扇区的开始。另外它还包括柱面号、扇区号和扇区大小等信息\r\n- - 数据区：\r\n由低级格式化程序指定，一般为 512 Bytes\r\n- - 纠错码：\r\n包含一些冗余信息，用来纠正在读取扇区时可能出现的错误\r\n- - 往往会在 0 扇区存放一些系统启动代码和一个分区表\r\n\r\n## 磁盘的调度算法\r\n访问一个扇区的时候，所需的时间主要在三个方面：\r\n\r\n- 柱面定位时间\r\n磁盘的传动装置带动磁头臂和磁头移动——机械运动\r\n- 旋转延迟时间\r\n档次头移动到正确的柱面后，磁头下方的扇区可能不是目标扇区，则磁头需要等待目标扇区到达——机械运动\r\n- 数据传送时间\r\n\r\n### 先来先服务算法（First-Come First-Served, FCFS）\r\n按照请求到达的时间先后顺序来依次执行\r\n\r\n- 优点\r\n简单、公平\r\n- 缺点\r\n效率不高，两次时间上相邻的请求可能并无任何关系，磁盘上的存储位置也可能相距甚远\r\n\r\n### 最短搜索时间算法（Shortest Seek Time First, SSTF）\r\n> 从磁盘的访问请求队列中，选择从当前磁头出发，移动距离最短的那个请求去执行。\r\n\r\n这个算法的目标是使每一次得磁头移动距离最短，因此是一种局部最优算法。一般来说比FCFS效率高。\r\n\r\n但是这个算法有一个大的缺陷，即如果目标扇区在两边的柱面上，则可能长期处于`饥饿`状态，时钟没有机会去执行\r\n\r\n### 电梯算法（Elevator Algorithm, SCAN）\r\n> 也称为扫描算法，磁头从当前位置开始，线沿着一个方向移动，并且以此执行这条路径上所有访问请求。直到尽头，再调转方向，回过头来继续进行。\r\n\r\n解决了SSTF算法的一大缺点\r\n而且应用此算法，磁头的移动距离不会超过出面总数的两倍\r\n\r\n## 出错处理\r\n磁盘制造的瑕疵不可避免，数据密度一大，就容易出错。\r\n因为磁盘的访问是以扇区为单位的，只要在一个扇区当中只有一个数据位不能被正常访问，那么整个扇区的数据都不能使用。然而，如果出错的位数不是太多，只有少量的几个，都可以通过扇区的纠错码来校正。如果出错的位数太多，则整个扇区都必须被放弃。\r\n\r\n- 对于坏扇区，有两种处理策略：\r\n1. 由设备控制器来处理\r\n磁盘出厂前，厂商将对磁盘进行测试，然后用一个列表来记录所有的坏扇区，并把它写入磁盘，然后对每个坏扇区用一个备用的扇区替代它。\r\n2. 由操作系统来处理\r\n操作系统对整个磁盘进行测试，获得一个坏扇区的列表，在此基础上构建一个映射表，对扇区编号进行调整。为了避免这些坏扇区被使用，操作系统可以创建一些特殊的文件`占用`坏扇区。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}